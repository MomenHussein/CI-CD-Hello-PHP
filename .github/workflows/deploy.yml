name: Deploy Laravel & React App via SSH

on:
  push:
    branches:
      - master

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/laravel-app:latest
  APP_ENV: production

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4.2.2

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
          php-version: '8.2'
          extensions: mbstring, xml, bcmath, curl, gd, pdo, pdo_mysql
          tools: composer

    - name: Install Dependencies
      working-directory: ./laravel
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Minikube
      uses: medyagh/setup-minikube@latest
    
    - name: Start Minikube
      run: minikube start

    - name: Remove Git Submodules (if any)
      run: |
        git submodule deinit -f .
        rm -rf .git/modules/*
        git rm -f CI-CD-Hello-PHP || true

    - name: Set lowercase repository name
      id: vars
      run: |
        echo "repo_lower=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

    - name: Set environment variables based on branch
      run: |
        case "${{ github.ref }}" in
          refs/heads/development)
            echo "SERVICE_NAME=development" >> $GITHUB_ENV
            ;;
          refs/heads/master)
            echo "SERVICE_NAME=production" >> $GITHUB_ENV
            ;;
          refs/heads/local)
            echo "SERVICE_NAME=local" >> $GITHUB_ENV
            ;;
        esac
    
    - name: Login to GitHub Container Registry (GHCR)
      run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install NPM dependencies & build assets
      working-directory: ./laravel
      run: |
        npm install
        npm run build
        
    - name: Install dependencies
      working-directory: ./react-app
      run: |
        npm install
        npm run build
        cd ..

    - name: Build React app
      working-directory: ./react-app
      run: |
          rm -f package-lock.json
          npm install
          npm install web-vitals --save || true
          npm run build
          cd ..

    - name: Copy React build to Laravel public/react
      run: |
        rm -rf laravel/public/react
        mkdir -p laravel/public/react
        cp -r react-app/build/* laravel/public/react/
    
    - name: Build Laravel Docker image
      run: |
        docker build \
          -f laravel/Dockerfile.laravel \
          --build-arg APP_ENV=${{ env.APP_ENV }} \
          -t ghcr.io/${{ steps.vars.outputs.repo_lower }}/laravel-app:latest ./laravel

    - name: Build React Docker image
      run: |
        docker build -f react-app/Dockerfile.react \
        -t ghcr.io/${{ steps.vars.outputs.repo_lower }}/react-app:latest ./react-app

    - name: Push Laravel image
      run: docker push ghcr.io/${{ steps.vars.outputs.repo_lower }}/laravel-app:latest

    - name: Push React image
      run: docker push ghcr.io/${{ steps.vars.outputs.repo_lower }}/react-app:latest

    - name: Install SSH Client
      run: sudo apt-get install -y openssh-client

    - name: Set up SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy on server
      run: |
        case "${GITHUB_REF}" in
          refs/heads/master)
            echo "DEPLOY_ENV=local" >> $GITHUB_ENV
            ;;
        esac

        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin &&
          docker pull ghcr.io/${{ steps.vars.outputs.repo_lower }}/laravel-app:latest &&
          docker stop app || true &&
          docker rm app || true &&
          docker run -d --name app -p 9000:80 ghcr.io/${{ steps.vars.outputs.repo_lower }}/laravel-app:latest
          docker pull ghcr.io/${{ steps.vars.outputs.repo_lower }}/react-app:latest &&
          docker stop react-app || true &&
          docker rm -f react-app || true
          docker run -d --name react-app -p 3000:80 ghcr.io/${{ steps.vars.outputs.repo_lower }}/react-app:latest        '

    - name: Create Docker config.json for GHCR
      run: |
        mkdir -p ~/.docker
        echo '{ 
          "auths": {
            "ghcr.io": {
              "username": "${{ secrets.GHCR_USERNAME }}",
              "password": "${{ secrets.GHCR_TOKEN }}"
            }
          }
        }' > ~/.docker/config.json
    - name: Encode Docker config.json
      id: dockerconfig
      run: |
        DOCKER_CONFIG_JSON=$(cat ~/.docker/config.json | base64 -w 0)
        echo "DOCKER_CONFIG_JSON=$DOCKER_CONFIG_JSON" >> $GITHUB_ENV

    - name: Apply namespace
      run: |
        cd k8s &&
        kubectl apply -f namespace.yml

    - name: Generate secret-ghcr.yml
      run: |
        cd k8s &&
        cat <<EOF > secret-ghcr.yml
        apiVersion: v1
        kind: Secret
        metadata:
          name: ghcr-secret
          namespace: my-app
        type: kubernetes.io/dockerconfigjson
        data:
          .dockerconfigjson: ${{ env.DOCKER_CONFIG_JSON }}
        EOF

    - name: Apply GHCR secret to Kubernetes
      run: |
        cd k8s &&
        kubectl apply -f secret-ghcr.yml
      
    - name: Apply Kubernetes Manifests via SSH
      run: |
          cd k8s &&
          # 2. إنشاء Secret لمصادقة GHCR (GitHub Container Registry)
          kubectl apply -f secret-ghcr.yml          
          # 3. إنشاء ConfigMap لتمرير الإعدادات الخاصة بـ Laravel أو React
          kubectl apply -f configmap.yml          
          # 4. إنشاء Deployment خاص بـ Laravel
          kubectl apply -f laravel-deployment.yml          
          # 5. إنشاء Service للـ Laravel
          kubectl apply -f laravel-service.yml          
          # 6. إنشاء Deployment خاص بـ React
          kubectl apply -f react-deployment.yml          
          # 7. إنشاء Service للـ React
          kubectl apply -f react-service.yml         
          # 8. إنشاء الـ Ingress (علشان يربط الـ Domain بالـ Services)
          kubectl apply -f ingress.yml     
          # 9. أي Services تانية إضافية (لو فيه)
          kubectl apply -f service.yml

          

        
